//
//  NewTaskViewController.m
//  SaleDemo
//
//  Created by wuzhensong on 14-4-27.
//  Copyright (c) 2014年 mosh. All rights reserved.
//

#import "NewTaskViewController.h"
#import "TaskModel.h"
#import "DateManger.h"
#import "MOSHLocalNotification.h"
#import "ClientVisitNotificationModel.h"

typedef enum{
    PickerViewModel_remark = 1000,
    PickerViewModel_state = 1001,
    PickerViewModel_alert = 1002,
} PickerViewModel;

static NSArray *alertArray = nil;
static NSArray *stateArray = nil;
static NSArray *remarkArray = nil;
static CGFloat scrollViewHeight = 524;

@interface NewTaskViewController ()

@end

@implementation NewTaskViewController

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
        self.taskState = TaskState_new;
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    
    self.baseScrollView.contentSize = CGSizeMake(SCREENWIDTH, scrollViewHeight);
    alertArray = @[@"不提醒",@"5分钟",@"10分钟",@"30分钟",@"1小时",@"2小时",@"5小时",@"10小时",@"24小时"];
    stateArray =  @[@"普通",@"紧急重要",@"无效"];
    remarkArray =  @[@"初次见面",@"商业洽谈",@"回访客户",@"签订合同"];
    [self createBarWithLeftBarItem:MoshNavigationBarItemBack rightBarItem:MoshNavigationBarItemNone title:@"新建任务"];
    [self.dateButton setTitle:[GlobalConfig date:[NSDate date] format:DATEFORMAT_08] forState:UIControlStateNormal];
    [self.timeButton setTitle:[GlobalConfig date:[NSDate date] format:DATEFORMAT_09] forState:UIControlStateNormal];
    
    if (self.taskState == TaskState_finish) {
        
        [self.uploadButton setTitle:@"保存任务" forState:UIControlStateNormal];
        self.title = @"查看任务";
        self.clientText.text = self.task.client;
        self.addressText.text = self.task.address;
        self.otherText.text = self.task.other;
        
        [self.cityButton setTitle:self.task.city forState:UIControlStateNormal];
        [self.stateButton setTitle:self.task.state forState:UIControlStateNormal];
        [self.remarkButton setTitle:self.task.remark forState:UIControlStateNormal];
        [self.alertButton setTitle:[self alertTimeConverToStr:self.task.alertTime] forState:UIControlStateNormal];
        [self.dateButton setTitle:self.task.date forState:UIControlStateNormal];
        [self.timeButton setTitle:self.task.time forState:UIControlStateNormal];
        
        self.uploadButton.hidden  = self.task.finish;
    }
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoardDidShow:) name:UIKeyboardDidShowNotification object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoardDidDisapper:) name:UIKeyboardDidHideNotification object:nil];

}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (NSString *)alertTimeConverToStr:(AlertTime)time
{
    
    if (time < alertArray.count) {
        return alertArray[time];
    }
    return @"";
}

- (AlertTime)strConverToAlertTime:(NSString *)str
{
    NSInteger time = [alertArray indexOfObject:str];
    if (time != NSNotFound) {
        return time;
    }
    return AlertTime_fiveMin;
}



#pragma mark - buttonClick -
- (IBAction)dateClick:(id)sender {
    if (!self.pickerView_date.superview) {
        self.pickerView_date = [[WSDatePickerView alloc] initWithdataPickerMode:UIDatePickerModeDate];
        self.pickerView_date.backgroundColor = [UIColor grayColor];
        self.pickerView_date.delegate = self;
        [self.view.window addSubview:self.pickerView_date];
    }
}

- (IBAction)timeClick:(id)sender {
    if (!self.pickerView_time.superview) {
        self.pickerView_time = [[WSDatePickerView alloc] initWithdataPickerMode:UIDatePickerModeTime];
        self.pickerView_time.backgroundColor = [UIColor grayColor];
        self.pickerView_time.delegate = self;
        [self.view.window addSubview:self.pickerView_time];
    }
}

- (IBAction)upload:(id)sender {
    if (![GlobalConfig isKindOfNSStringClassAndLenthGreaterThanZero:self.clientText.text Alert:@"拜访对象不能为空"]) {
        return;
    }
    if (![GlobalConfig isKindOfNSStringClassAndLenthGreaterThanZero:self.dateButton.titleLabel.text Alert:@"拜访日期不能为空"]) {
        return;
    }

    if (![GlobalConfig isKindOfNSStringClassAndLenthGreaterThanZero:self.dateButton.titleLabel.text Alert:@"拜访时间不能为空"]) {
        return;
    }
    if (![GlobalConfig isKindOfNSStringClassAndLenthGreaterThanZero:self.cityButton.titleLabel.text     Alert:@"城市不能为空"]) {
        return;
    }
    
    if (![GlobalConfig isKindOfNSStringClassAndLenthGreaterThanZero:self.addressText.text Alert:@"地址不能为空"]) {
        return;
    }
    
    if (self.taskState == TaskState_new) {
        self.task = [self createTask];
        //放入文件
        [[DateManger shareDateManger] addtask:self.task];
        
        //添加提醒
        if (self.task.alertTime != AlertTime_noAlert) {
            ClientVisitNotificationModel *noti = [[ClientVisitNotificationModel alloc] initWithTaskModel:self.task];
            [MOSHLocalNotification addNotification:noti];
        }
        
        //返回上一页
        [GlobalConfig alert:@"上传任务成功"];
        [self.navigationController popViewControllerAnimated:YES];
    }
    else {
        //修改文件
        [[DateManger shareDateManger] updateTask:[self createTask] withOldTask:self.task];
        //修改提醒
        ClientVisitNotificationModel *old_noti = [[ClientVisitNotificationModel alloc] initWithTaskModel:self.task];

        ClientVisitNotificationModel *new_noti = [[ClientVisitNotificationModel alloc] initWithTaskModel:[self createTask]];
        if (self.task.alertTime == AlertTime_noAlert) {
            [MOSHLocalNotification deleteNotification:old_noti];
        }
        else {
            [MOSHLocalNotification updateNotification:new_noti oldNotification:old_noti];
        }
        
        //返回上一页
        [GlobalConfig alert:@"保存任务成功"];
        [self.navigationController popViewControllerAnimated:YES];
    }
    
}

- (TaskModel *) createTask
{
    TaskModel *model = [[TaskModel alloc] init];
    model.client = [GlobalConfig convertToString:self.clientText.text];
    model.date = [GlobalConfig convertToString:self.dateButton.titleLabel.text];
    model.time = [GlobalConfig convertToString:self.timeButton.titleLabel.text];
    model.city = [GlobalConfig convertToString:self.cityButton.titleLabel.text];
    model.address = [GlobalConfig convertToString:self.addressText.text];
    model.state = [GlobalConfig convertToString:self.stateButton.titleLabel.text];
    model.other = [GlobalConfig convertToString:self.otherText.text];
    model.remark = [GlobalConfig convertToString:self.remarkButton.titleLabel.text];
    model.alertTime = [self strConverToAlertTime:[GlobalConfig convertToString:self.alertButton.titleLabel.text]];
    model.finish = NO;
    return model;

}

- (IBAction)stateClick:(id)sender {
    
    if (!self.pickerView_state.superview) {
       self.pickerView_state = [self createPickerViewWithDataArray:stateArray];
    }
}

- (IBAction)alertClick:(id)sender {
    if (!self.pickerView_alert.superview) {
       self.pickerView_alert = [self createPickerViewWithDataArray:alertArray];
    }
}

- (IBAction)remarkClick:(id)sender {
    if (!self.pickerView_remark.superview) {
       self.pickerView_remark = [self createPickerViewWithDataArray:remarkArray];
    }
}

- (IBAction)clientList:(id)sender {
    ClientVisitListViewController *ctl = (ClientVisitListViewController *) [ClientVisitListViewController viewController];
    ctl.delegate = self;
    [self.navigationController pushViewController:ctl animated:YES];
}



- (IBAction)addImage:(id)sender {
}

- (IBAction)cityClick:(id)sender {
    if (!self.pickerView_city.superview) {
        self.pickerView_city = [[CityPickerView alloc] initWithFrame:CGRectZero];
        self.pickerView_city.backgroundColor = [UIColor grayColor];
        self.pickerView_city.delegate = self;
        [self.view.window addSubview:self.pickerView_city];
    }
}

- (void) navBackClick
{
    [self.pickerView_remark removeWSPickerView];
    [self.pickerView_alert removeWSPickerView];
    [self.pickerView_state removeWSPickerView];
    [self.pickerView_city removePickerView];
    [self.pickerView_date removePickerView];
    [self.pickerView_time removePickerView];
    [super navBackClick];
}
#pragma mark - cityPickerViewDelegate -

- (void) doneWithSelectCity:(NSString *)cityName
{
    [self.cityButton setTitle:cityName forState:UIControlStateNormal];
}

- (WSPickerView *) createPickerViewWithDataArray:(NSArray *)array
{
    WSPickerView *view = [[WSPickerView alloc] initWithDataArray:array];
    view.backgroundColor = [UIColor grayColor];
    view.delegate = self;
    [self.view.window addSubview:view];
    return view;
}

#pragma  mark - pickerViewDelegate -

- (void) wsPickerSelectIndex:(NSInteger)index pickerView:(WSPickerView *)view
{
    if (view == self.pickerView_remark) {
        if (index < remarkArray.count) {
            [self.remarkButton setTitle:remarkArray[index] forState:UIControlStateNormal];
        }
    }else if (view == self.pickerView_state) {

        if (index < stateArray.count) {
            [self.stateButton setTitle:stateArray[index] forState:UIControlStateNormal];
        }
    }
    else if (view == self.pickerView_alert) {
        if (index < alertArray.count) {
            [self.alertButton setTitle:alertArray[index] forState:UIControlStateNormal];
        }
    }
}

#pragma mark - WSDatePickeViewDelegate -
- (void) wsdatePickerSelectDate:(NSDate *)date mode:(UIDatePickerMode)mode
{
    if (mode == UIDatePickerModeDate) {
        [self.dateButton setTitle:[GlobalConfig date:date format:DATEFORMAT_08] forState:UIControlStateNormal];
    }
    else if (mode == UIDatePickerModeTime) {
        [self.timeButton setTitle:[GlobalConfig date:date format:DATEFORMAT_09] forState:UIControlStateNormal];
    }
}

#pragma  mark - ClientListDelegate -
- (void) selectClient:(ClientModel *)client
{
    self.clientText.text = client.name;
}

#pragma mark - UITextFieldDelegate -

- (BOOL) textFieldShouldReturn:(UITextField *)textField
{
    [textField resignFirstResponder];
    return YES;
}

#pragma mark - UIKeyboardNotification -
- (void) keyBoardDidShow:(NSNotification *)noti
{
    [GlobalConfig keyBoardDidShow:noti scrollView:self.baseScrollView];
}

- (void) keyBoardDidDisapper:(NSNotification *)noti
{
    [GlobalConfig keyBoardDidDisapper:noti scrollView:self.baseScrollView];
}


@end
